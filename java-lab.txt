import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedList;
public class ArrayLink {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
	    ArrayList<Student> s= null;
	    LinkedList<Employee> e=null;
	    int ch,id,age;
	    String name,design;
	    while(true)
	    {
	    	 System.out.println("1.Create ArrayList 2.Insert into ArrayList 3.Display the ArrayList "
	    	 		+ "4.Delete the ArrayList 5.Create Linklist 6.Insert into Linklist"
	    	 		+ " 8.Delete from front 9.Delete from Last: ");
	    	 System.out.println("Enter your choice:");
	    	 ch=sc.nextInt();
	    	 switch(ch)
	    	 {
	    	 case 1:
	    	        s=new ArrayList<>();
	    	        break;
	    	 case 2:
	    		    System.out.println("Enter student id");
	    		    id=sc.nextInt();sc.nextLine();
	    		    System.out.println("Enter student name:");
	    		    name=sc.nextLine();
	    		    System.out.println("Enter student age:");
	    		    age=sc.nextInt();
	    		    s.add(new Student(id , age,name));
	    		    break;
	    	 case 3:
	    		    System.out.println("Display ArrayList:");
	    		    for(Student st:s)
	    		    {  
	    		     System.out.println("Id:"+st.getid());
	    		     System.out.println("Age:"+st.getage());
	    		     System.out.println("Name:"+st.getname());	        			    
	    		    }
	    		    break;
	    	 case 4:
	    		   System.out.println("Enter id no to remove:");
	    		   id=sc.nextInt();
	    		   s.remove(id);
	    		   break;	    		   
	    	 case 5:
	    		    e=new LinkedList<>();
	    		    break;	    		    
	    	 case 6:
	    		   System.out.println("Enter Id:");
	    		   id=sc.nextInt();sc.nextLine();
	    		   System.out.println("Enter Name:");
	    		   name=sc.nextLine();
	    		   System.out.println("Enter designation:");
	    		   design = sc.nextLine();
	    		   e.add(new Employee(id,name,design));
	    		   break;
	    	 case 7:
	    		    System.out.println("Displaying LinkList:");
	    		    for(Employee em:e)
	    		    {
	    		    	 System.out.println("ID:"+em.getid());
	    		    	 System.out.println("Name:"+em.getname());
                         System.out.println("Designation:"+em.getdesign());	    		    	 
	    		    }
	    		    break;
	    	 case 8:
	    		    System.out.printf("Removing front name:",e.removeFirst().name);
	    		    break;
	    	 case 9:

	    		    System.out.printf("Removing last name:",e.removeLast().name);
	    		    break;
	    	default:
	    		   System.out.println("Invalid choice:");  }}}}
--------
public class Employee {
	int id;
	String name,design;	
	Employee(int id, String name ,String design )
	{
	   this.id = id;
	   this.name =name;
	   this.design = design;	   
	}	
	public int getid()
	{
		 return this.id;	 
	}
	public String getname()
	{
		 return this.name;		 
	}	
	public String getdesign()
	{
		 return this.design;		 
	}}
---
public class Student {
	int id,age;
	String name;	
	Student(int id,int age, String name)
	{	
		 this.id=id;
		 this.age=age;
		 this.name=name;		
	}	
	public int getid()
	{
		 return this.id;
	}	
	public int getage()
	{
		 return this.age;	 
	}	
	public String getname()
	{
		 return this.name;	 
	}}
--------------------lab2---------
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.List;
import java.util.LinkedList;
public class HashMappro1 {
	String state,capital;
	Map<String,String> dict= new HashMap<String,String>();
	void set(String state,String capital)
	{
		dict.put(state, capital);
	}
	void get()
	{
		System.out.println("State \t Capital");
		for(Map.Entry<String, String> word : dict.entrySet())
		{
			System.out.println(word.getKey()+"\t"+word.getValue());			
		}			
	}
	void sort()
	{		
		List<Entry<String,String>> list = new LinkedList<Entry<String,String>>(dict.entrySet());
		Collections.sort(list, new Comparator<Entry<String,String>>(){
			 public int compare(Entry<String,String> ol, Entry<String,String> ol2)   
			 {
				 return ol.getValue().compareTo(ol2.getValue());
			 }		
		});
		for(Entry<String,String> item:list)
		{
			System.out.println(item);
		}			
		//List<String> list = new LinkedList<String>(dict.keySet());
		//Collections.sort(list, new Comparator<String>(){
		//	 public int compare(String ol, String ol2)   
			// {
				// return ol.compareTo(ol2);
						 //getValue().compareTo(ol2.getValue());
			 //}
			
	//	});
		//for(String item:list)
		//{
			//System.out.println(item);
		//}	
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		HashMappro1 obj= new HashMappro1();
		Scanner sc=new Scanner(System.in);
		while(true)
		{
			System.out.println("MENU");
			System.out.println("1.Adding Element");
			System.out.println("2.Sorting");
			System.out.println("3.Display");
			System.out.println("Enter your choice");
			int ch= sc.nextInt();
			switch(ch)
			{
					case 1:System.out.println("Enter the state name");
							String state=sc.next();
							System.out.println("Enter the capital name");
							String capital=sc.next();
							obj.set(state,capital);
							break;
					case 2:obj.sort();
							break;
					case 3:obj.get();
							break;}}}}
------
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.Map.Entry;

public class Treemappro1 {
	String state,capital;
	TreeMap<String,String> dict= new TreeMap<String,String>();
	void set(String state,String capital)
	{
		dict.put(state, capital);
	}
	void get()
	{
		System.out.println("State \t Capital");
		for(Map.Entry<String, String> word : dict.entrySet())
		{
			System.out.println(word.getKey()+"\t"+word.getValue());
			
		}		
	}
   void search(String key)
   {
	   if(dict.containsKey(key))
	   {
		   System.out.println("The key is present");
	   }
	   else
	   {
		   System.out.println("The key is not present");
	   }	   
   }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Treemappro1 obj= new Treemappro1();
		Scanner sc=new Scanner(System.in);
		while(true)
		{
			System.out.println("MENU");
			System.out.println("1.Adding Element");
			System.out.println("2.Searching");
			System.out.println("3.Display");
			System.out.println("Enter your choice");
			int ch= sc.nextInt();
			switch(ch)
			{
					case 1:System.out.println("Enter the state name");
							String state=sc.next();
							System.out.println("Enter the capital name");
							String capital=sc.next();
							obj.set(state,capital);
							break;
					case 2: System.out.println("Enter the key to search");
							String key=sc.next();
						obj.search(key);
							break;
					case 3:obj.get();
							break;}}}}
-------------------lab8
package com.mymvc;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class mvccontroller {
 @RequestMapping("/")
 public String display() {
	 return "display";
 }
 @RequestMapping("/hello")
 public ModelAndView hello(@RequestParam String cusname,@RequestParam String cusid) {
	 System.out.println("customer name"+cusname);
	 System.out.println("customer Id"+cusid);
	 ModelAndView mv=new ModelAndView("hello");
	 mv.addObject("customer",cusname);
	 mv.addObject("customerId",cusid);
	 return mv;
 }
}
-----
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<form action="hello">
Customer Name:<input type="text" name="cusname"/> 
Customer Id:<input type="text" name="cusid"/>
<input type="submit" value="submission"/>
</form>
</body>
</html>
------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body bgcolor="lightblue">
<h1 >hello welcome
${customer }</h1>
<h1>${customerId }</h1>
</body>
</html>
----------------------coap
package RestCoap.RestCoap;
import java.io.IOException;
import java.net.ConnectException;
import org.eclipse.californium.core.CoapClient;
public class Coap_client {
public static void main(String[] args) {
CoapClient client = new CoapClient("coap://192.168.0.104/hi");
for(int i = 0; i < 10 ; i++) {
String text;
try {
text = client.get().getResponseText();
System.out.println(text);
Thread.sleep(1000);
}catch(ConnectException ce) {
ce.printStackTrace();
}catch(IOException ie) {
ie.printStackTrace();
}catch(Exception e) {
e.printStackTrace();
}
}
}
}
----
package RestCoap.RestCoap;
import org.eclipse.californium.core.CoapResource;
import org.eclipse.californium.core.CoapResponse;
import org.eclipse.californium.core.CoapServer;
import org.eclipse.californium.core.network.Exchange;
import org.eclipse.californium.core.server.resources.CoapExchange;
public class MyResource1 extends CoapResource{
public MyResource1(String string) {
super(string);
}
private int i = 0;
public void handleGET(CoapExchange exchange) {
exchange.respond("Temperature "+i++);
}
public static void main(String[] args) {
CoapServer server = new CoapServer();
server.add(new MyResource1("hello"));
server.add(new MyResource1("hi"));
server.start();
}
}
-----
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>RestCoap</groupId>
  <artifactId>RestCoap</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <name>RestCoap</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.eclipse.californium</groupId>
      <artifactId>californium-core</artifactId>
      <version>3.0.0</version>
    </dependency>
     <dependency>
    <groupId> org.apache.cassandra</groupId>
    <artifactId>cassandra-all</artifactId>
    <version>0.8.1</version>

    <exclusions>
      <exclusion> 
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
      </exclusion>
      <exclusion> 
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
      </exclusion>
    </exclusions> 

  </dependency>
    
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
-------------hibernate
package program3;
import java.util.List;
import java.util.Scanner;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
public class Student_main {
	static Scanner sc = new Scanner(System.in);	
	StandardServiceRegistry ssr;
	Metadata meta;
	SessionFactory sf;
	Session session; 
	Transaction t;
	public void connect() {
		ssr = (StandardServiceRegistry) new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();
		meta = new MetadataSources(ssr).getMetadataBuilder().build();
		sf = meta.getSessionFactoryBuilder().build();
		session = sf.openSession();
		t = session.beginTransaction();
	}
	public void Insert() {
		this.connect();
		Student s = new Student();
		s.setId(2);
		s.setUsn("1RV20MC101");
		s.setName("Vikas");
		s.setAddress("Bangalore");
		s.setMarks(455f);
		session.save(s);
		t.commit();
		System.out.println("Inserted");
	}
	public void delete() {
		this.connect();
		Student s1 = new Student();
		System.out.print("Enter ID : ");
		int id =  sc.nextInt();
		s1.setId(id); session.delete(s1);
		t.commit();
		System.out.println("Deleted");		
	}
	public void select() {
		this.connect();
		List<Student> s = session.createQuery("from Student").list();
		for(Student i:s) {
			System.out.println("id="+i.getId()+"name="+i.getName()+"marks="+i.getMarks());
		}	}
	public static void main(String[] args) {
		Student_main sm = new Student_main();
		while(true) {
			System.out.println("1- Insert");
			System.out.println("2- Select");
			System.out.println("3- Delete");
			System.out.print("Enter your choice : ");
			int choice = sc.nextInt();
			switch(choice) {
			case 1:
				sm.Insert();
				break;
			case 2:
				sm.select();
				break;
			case 3:
				sm.delete();
				break;
			default:
				System.out.println("Invalid");}}}}
------
package program3;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="Student")
public class Student {
	@Id
	int Id;
	String Name,Usn,Address;
	float Marks;
	public int getId() {
		return Id;
	}
	public void setId(int id) {
		this.Id = id;
	}
	public String getName() {
		return Name;
	}
	public void setName(String name) {
		this.Name = name;
	}
	public String getUsn() {
		return Usn;
	}
	public void setUsn(String usn) {
		this.Usn = usn;
	}
	public String getAddress() {
		return Address;
	}
	public void setAddress(String address) {
		this.Address = address;
	}
	public float getMarks() {
		return Marks;
	}
	public void setMarks(float marks) {
		this.Marks = marks;
	}
	
	}
-----
mysql -u 1rv20mc111 -h 172.15.65.77 -p
show databases;
use 1rv20mc111;
create table Student(id int primary key,usn varchar(25),name varchar(25), address varchar(25),marks decimal);
-------------------lab5
package Lab5maven.Lab5maven;

import java.io.Serializable;

public class Customer implements Serializable
{
	private static final long serialVersionUID = -2937165078778702016L;
	private String pname;
	private int page;
	public String getPname() {
		return pname;
	}
	public void setPname(String pname) {
		this.pname = pname;
	}
	public int getPage() {
		return page;
	}
	public void setPage(int page) {
		this.page = page;
	}
	@Override
	public String toString() {
		return " [Passanger Name=" + pname + ", Passanger Age=" + page + "]";
	}
	

}
-----
package Lab5maven.Lab5maven;


import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestClass 
{
	public static void main(String[] args) {
		ApplicationContext ctx=new ClassPathXmlApplicationContext("/config.xml");
		
		Ticket c1=(Ticket)ctx.getBean("ticket");
		System.out.println(c1);
	}
}
----
package Lab5maven.Lab5maven;

import java.io.Serializable;

public class Ticket implements Serializable
{
	private static final long serialVersionUID = -6931036513664758050L;
	private String ticketNumer;
	private double price;
	private String source;
	private String destination;
	private Customer customer;
	public String getTicketNumer() {
		return ticketNumer;
	}
	public void setTicketNumer(String ticketNumer) {
		this.ticketNumer = ticketNumer;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public String getSource() {
		return source;
	}
	public void setSource(String source) {
		this.source = source;
	}
	public String getDestination() {
		return destination;
	}
	public void setDestination(String destination) {
		this.destination = destination;
	}
	public Customer getCustomer() {
		return customer;
	}
	public void setCustomer(Customer customer) {
		this.customer = customer;
	}
	@Override
	public String toString() {
		return "Ticket [ticketNumer=" + ticketNumer + ", price=" + price + ", source=" + source + ", destination="
				+ destination + ", customer=" + customer + "]";
	}
	
}
-------
<?xml version="1.0" encoding="UTF-8"?>

<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
               
               
     <bean class="Lab5maven.Lab5maven.Ticket" name="ticket" >
     <property name="customer" ref="cust" />
     <property name="ticketNumer" value="1RV20MC111" />
     <property name="source" value="Bangalore" />
     <property name="destination" value="Mandya" />
     <property name="price" value="5000" />
     </bean>
     
     <bean class="Lab5maven.Lab5maven.Customer" name="cust">
     	<property name="pname" value="Vinod H"/>
     	<property name="page" value="23" />
     
     </bean>
     
    
</beans>
------
<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>5.3.6</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.6</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
------------------java based
package Lab5maven2.Lab5maven2;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class Config 
{
	
	@Bean
	public Student setBeanStudent()
	{
		return new Student();
	}
	
	@Bean
	public Marks setBeanMarks()
	{
		return new Marks();
	}
}
-----
package Lab5maven2.Lab5maven2;


import java.io.Serializable;

public class Marks implements Serializable 
{
	private static final long serialVersionUID = 4058735100816010657L;
	private int m1;
	private int m2;
	private int m3;
	public int getM1() {
		return m1;
	}
	public void setM1(int m1) {
		this.m1 = m1;
	}
	public int getM2() {
		return m2;
	}
	public void setM2(int m2) {
		this.m2 = m2;
	}
	public int getM3() {
		return m3;
	}
	public void setM3(int m3) {
		this.m3 = m3;
	}
	@Override
	public String toString() {
		return " [Java=" + m1 + ", Python=" + m2 + ", C++=" + m3 + "]";
	}
	
	

}
----
package Lab5maven2.Lab5maven2;


import java.io.Serializable;

public class Student implements Serializable
{
	private static final long serialVersionUID = -1515840032609928305L;
	private String name;
	private String usn;
	private Marks marks;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getUsn() {
		return usn;
	}
	public void setUsn(String usn) {
		this.usn = usn;
	}
	public Marks getMarks() {
		return marks;
	}
	public void setMarks(Marks marks) {
		this.marks = marks;
	}
	@Override
	public String toString() {
		return "Student [name=" + name + ", usn=" + usn + ", Marks=" + marks + "]";
	}
	
}
----
package Lab5maven2.Lab5maven2;


import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class TestClass1 {

	public static void main(String[] args) {
		ApplicationContext ctx=new AnnotationConfigApplicationContext(Config.class);
		
		Marks marks=(Marks)ctx.getBean(Marks.class);
		marks.setM1(98);
		marks.setM2(88);
		marks.setM3(79);
		
		Student s=ctx.getBean(Student.class);
		s.setName("Vinod");
		s.setUsn("1RV20MC111");
		s.setMarks(marks);
		
		System.out.println(s);

	}

}


